#! /usr/bin/env node
'use strict';

const util = require('util');
const path = require('path');
const Loader = require('yaml-config-loader');
const yargs = require('yargs');
const loader = new Loader();

const knexConfig = require('../knexfile');
const probodb = require('..');
const Server = probodb.lib.Server;
const Api = probodb.lib.Api;
const Db = probodb.lib.Db;
const logger = require('../lib/logger').getLogger();
let knexOverride = {};

process.env.NODE_ENV = process.env.NODE_ENV || 'production';

const argv = yargs
  .describe('config', 'A YAML config file or directory of yaml files to load, can be invoked multiple times and later files will override earlier.')
  .alias('config', 'c')
  .alias('knexfile', 'k')
  .argv;

loader.on('error', function(error) {
  if (error.name === 'YAMLException') {
    logger.error(util.print('Error parsing YAML file `', error.filePath, '`:', error.reason));
    logger.error(error);
  }
});

loader.add(path.resolve(path.join(__dirname, '..', 'defaults.yaml')));

if (argv.config) {
  loader.add(path.resolve(argv.config));
}

if (argv.knexfile) {
  knexOverride = require(argv.knexfile);
  Object.assign(knexConfig, knexOverride);
}

loader.addAndNormalizeObject({knexFile: knexConfig});

loader.load(function(error, config) {
  // We allow knex settings to be specified in many places. If there are
  // multiple options, our externally specified yaml file takes prioerity over
  // an externally specified knexfile.js.
  const knexConfig = Object.assign({}, config.knexFile, config.knex);
  const knex = require('knex')(knexConfig[process.env.NODE_ENV]);
  const plugins = config.pluginDirectory !== null ? require(config.pluginDirectory) : {buildEventPlugins: [], apiPlugins: [], tablePlugins: []};
  const buildEventPluginClasses = plugins.buildEventPlugins ? plugins.buildEventPlugins : [];
  const apiPluginClasses = plugins.apiPlugins ? plugins.apiPlugins : [];
  const tablePluginClasses = plugins.tablePlugins ? plugins.tablePlugins : [];

  // Required table plugins
  tablePluginClasses.push(require('../lib/table/build'));
  tablePluginClasses.push(require('../lib/table/buildStep'));
  tablePluginClasses.push(require('../lib/table/project'));
  tablePluginClasses.push(require('../lib/table/repo'));

  const buildEventPlugins = buildEventPluginClasses.map(function(buildEventPluginClass) {
    logger.info('loaded buildEvent plugin: ' + buildEventPluginClass.name);
    return new buildEventPluginClass({knex, logger});
  });

  const apiPlugins = apiPluginClasses.map(function(apiPluginClass) {
    logger.info('loaded api plugin: ' + apiPluginClass.name);
    return new apiPluginClass({knex, logger});
  });

  const tablePlugins = tablePluginClasses.map(function(tablePluginClass) {
    logger.info('loaded table plugin: ' + tablePluginClass.name);
    return new tablePluginClass({knex, logger});
  });

  const db = new Db({knex, logger, tablePlugins});

  const server = new Server({config, db, buildEventPlugins, logger});
  server.start();

  const api = new Api({config, db, apiPlugins, logger});
  api.start();
});
