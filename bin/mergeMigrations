#! /usr/bin/env node
'use strict';

const util = require('util');
const fs = require('fs');
const path = require('path');
const Loader = require('yaml-config-loader');
const yargs = require('yargs');
const loader = new Loader();

const argv = yargs
  .describe('config', 'A YAML config file or directory of yaml files to load, can be invoked multiple times and later files will override earlier.')
  .alias('config', 'c')
  .alias('knexfile', 'k')
  .argv;

loader.on('error', function(error) {
  if (error.name === 'YAMLException') {
    console.error(util.print('Error parsing YAML file `', error.filePath, '`:', error.reason));
    console.log(error);
  }
});

loader.add(path.resolve(path.join(__dirname, '..', 'defaults.yaml')));

if (argv.config) {
  loader.add(path.resolve(argv.config));
}

loader.addAndNormalizeObject({});

loader.load(function(error, config) {
  let baseMigrationDir = path.resolve(path.join(__dirname, '..', 'baseMigrations'));
  let migrationDir = path.resolve(path.join(__dirname, '..', 'migrations'));
  let pluginMigrationDir = config.pluginDirectory !== null ? path.resolve(path.join(config.pluginDirectory, 'migrations')) : null;

  fs.readdir(baseMigrationDir, function(error, files) {
    if (error) {
      console.log(error);
      process.exit(1);
    }
    files.forEach(function(file) {
      fs.createReadStream(path.join(baseMigrationDir, file))
        .pipe(fs.createWriteStream(path.join(migrationDir, file)));

    });
  });

  if (pluginMigrationDir) {
    fs.readdir(pluginMigrationDir, function(error, files) {
      if (error) {
        console.log(error);
        process.exit(1);
      }
      files.forEach(function(file) {
        fs.createReadStream(path.join(pluginMigrationDir, file))
          .pipe(fs.createWriteStream(path.join(migrationDir, file)));    });
    });
  }
});
